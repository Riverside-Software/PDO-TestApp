 
 /*------------------------------------------------------------------------
    File        : frmConditionalFormatting
    Purpose     : 
    Syntax      : 
    Description : 
    Author(s)   : hdaniels
    Created     : Sat Jul 19 12:21:02 EDT 2008
    Notes       : 
  ----------------------------------------------------------------------*/

USING Progress.Lang.*.
USING Progress.Windows.Form.
using Infragistics.Win.ConditionValueAppearance.
using Infragistics.Win.OperatorCondition.
using Infragistics.Win.FormulaCondition.
using Infragistics.Win.TrueCondition.
using Infragistics.Win.ComplementCondition.
using Infragistics.Win.ConditionGroup.
using Infragistics.Win.ConditionOperator.
using Infragistics.Win.LogicalOperator.
using Infragistics.Win.SupportDialogs.ConditionalFormatting.*.

using System.Drawing.Color. 

using WinGrid.SamplesExplorer.*.

CLASS WinGrid.SamplesExplorer.frmConditionalFormatting INHERITS Form IMPLEMENTS ISamplesBase  : 
	
	DEFINE PRIVATE VARIABLE components AS System.ComponentModel.IContainer.

	define private variable bindingSource1 as Progress.Data.BindingSource no-undo.

	define public variable btnTitle as System.Windows.Forms.Button no-undo.
	define private variable ultraLabel1 as Infragistics.Win.Misc.UltraLabel no-undo.
	define private variable panel3 as System.Windows.Forms.Panel no-undo.
	define private variable lblInfo as Infragistics.Win.Misc.UltraLabel no-undo.
	define private variable btnShowConditionalFormatDesigner as Infragistics.Win.Misc.UltraButton no-undo.
	define private variable UltraGrid1 as Infragistics.Win.UltraWinGrid.UltraGrid no-undo.

    /** manual defintions */
    define temp-table band no-undo
        field RowKey as integer 
        field OperatorCondition as integer 
        field FormulaCondition as integer 
        field ConditionGroup as integer 
        field ComplementCondition as integer 
        field TrueCondition as integer 
        field UserDefinedCondition as integer
        index rowkey as unique rowkey.
	
    /** ISamplesBase properties */
	
	/* Provides a description for the sample. */
	define public property Description as character no-undo 
	get:
	    return "This sample demonstrates conditional formatting in the grid.".
	end.
	
    /* Name of the sample. */
	define public property SampleName as character no-undo
    get:
        return btnTitle:Text. 
    end.
	
    /* Type of sample. */
	define public property SampleType as character no-undo
	get:
	    return "Feature".
	end.    

	/* Preview Picture for Sample */
	define public property PreviewPicture as System.Drawing.Image no-undo
    get:
        return System.Drawing.Image:FromFile(SamplesPath:GraphicsPath + "/Previews/ConditionalFormatting.png").
    end.     

	define private variable ultraCalcManager1 as Infragistics.Win.UltraWinCalcManager.UltraCalcManager no-undo.
		
	CONSTRUCTOR PUBLIC frmConditionalFormatting (  ):	
		SUPER().
		InitializeComponent ( ).
        CreateData().
	END CONSTRUCTOR.

	method private void InitializeComponent ( ):

/* 		NOTE: The following method is generated by the OpenEdge Advanced GUI Visual Designer.

		We strongly suggest that the contents of this method only be modified using the
		Visual Designer to avoid any incompatible modifications.

		Modifying the contents of this method using a code editor will invalidate any support for this file. */

		this-object:components = new System.ComponentModel.Container().
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable tableDesc1 as Progress.Data.TableDesc no-undo.
		tableDesc1 = new Progress.Data.TableDesc("Band").
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable resources as System.Resources.ResXResourceSet no-undo.
		resources = Progress.Util.ResourceHelper:Load("WinGrid/SamplesExplorer/frmConditionalFormatting.resx", PROPATH).
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable appearance1 as Infragistics.Win.Appearance no-undo.
		appearance1 = new Infragistics.Win.Appearance().
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable ultraGridBand1 as Infragistics.Win.UltraWinGrid.UltraGridBand no-undo.
		ultraGridBand1 = new Infragistics.Win.UltraWinGrid.UltraGridBand("Band", -1).
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable ultraGridColumn1 as Infragistics.Win.UltraWinGrid.UltraGridColumn no-undo.
		ultraGridColumn1 = new Infragistics.Win.UltraWinGrid.UltraGridColumn("OperatorCondition").
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable ultraGridColumn2 as Infragistics.Win.UltraWinGrid.UltraGridColumn no-undo.
		ultraGridColumn2 = new Infragistics.Win.UltraWinGrid.UltraGridColumn("FormulaCondition").
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable ultraGridColumn3 as Infragistics.Win.UltraWinGrid.UltraGridColumn no-undo.
		ultraGridColumn3 = new Infragistics.Win.UltraWinGrid.UltraGridColumn("ConditionGroup").
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable ultraGridColumn4 as Infragistics.Win.UltraWinGrid.UltraGridColumn no-undo.
		ultraGridColumn4 = new Infragistics.Win.UltraWinGrid.UltraGridColumn("ComplementCondition").
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable ultraGridColumn5 as Infragistics.Win.UltraWinGrid.UltraGridColumn no-undo.
		ultraGridColumn5 = new Infragistics.Win.UltraWinGrid.UltraGridColumn("TrueCondition").
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable ultraGridColumn6 as Infragistics.Win.UltraWinGrid.UltraGridColumn no-undo.
		ultraGridColumn6 = new Infragistics.Win.UltraWinGrid.UltraGridColumn("UserDefinedCondition").
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable appearance2 as Infragistics.Win.Appearance no-undo.
		appearance2 = new Infragistics.Win.Appearance().
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable appearance3 as Infragistics.Win.Appearance no-undo.
		appearance3 = new Infragistics.Win.Appearance().
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable appearance4 as Infragistics.Win.Appearance no-undo.
		appearance4 = new Infragistics.Win.Appearance().
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable appearance5 as Infragistics.Win.Appearance no-undo.
		appearance5 = new Infragistics.Win.Appearance().
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable appearance6 as Infragistics.Win.Appearance no-undo.
		appearance6 = new Infragistics.Win.Appearance().
		@VisualDesigner.FormMember (NeedsInitialize="true").
		define variable appearance7 as Infragistics.Win.Appearance no-undo.
		appearance7 = new Infragistics.Win.Appearance().
		this-object:bindingSource1 = new Progress.Data.BindingSource().
		this-object:btnTitle = new System.Windows.Forms.Button().
		this-object:ultraLabel1 = new Infragistics.Win.Misc.UltraLabel().
		this-object:panel3 = new System.Windows.Forms.Panel().
		this-object:lblInfo = new Infragistics.Win.Misc.UltraLabel().
		this-object:btnShowConditionalFormatDesigner = new Infragistics.Win.Misc.UltraButton().
		this-object:UltraGrid1 = new Infragistics.Win.UltraWinGrid.UltraGrid().
		this-object:ultraCalcManager1 = new Infragistics.Win.UltraWinCalcManager.UltraCalcManager(this-object:components).
		cast(this-object:bindingSource1, System.ComponentModel.ISupportInitialize):BeginInit().
		this-object:panel3:SuspendLayout().
		cast(this-object:UltraGrid1, System.ComponentModel.ISupportInitialize):BeginInit().
		cast(this-object:ultraCalcManager1, System.ComponentModel.ISupportInitialize):BeginInit().
		this-object:SuspendLayout().
		/*  */
		/* bindingSource1 */
		/*  */
		tableDesc1:ChildTables = ?.
		@VisualDesigner.FormMember (NeedsInitialize="false", InitializeArray="true").
		define variable arrayvar0 as Progress.Data.ColumnPropDesc extent 6 no-undo.
		arrayvar0[1] = new Progress.Data.ColumnPropDesc("OperatorCondition", "OperatorCondition", Progress.Data.DataType:INTEGER).
		arrayvar0[2] = new Progress.Data.ColumnPropDesc("FormulaCondition", "FormulaCondition", Progress.Data.DataType:INTEGER).
		arrayvar0[3] = new Progress.Data.ColumnPropDesc("ConditionGroup", "ConditionGroup", Progress.Data.DataType:INTEGER).
		arrayvar0[4] = new Progress.Data.ColumnPropDesc("ComplementCondition", "ComplementCondition", Progress.Data.DataType:INTEGER).
		arrayvar0[5] = new Progress.Data.ColumnPropDesc("TrueCondition", "TrueCondition", Progress.Data.DataType:INTEGER).
		arrayvar0[6] = new Progress.Data.ColumnPropDesc("UserDefinedCondition", "UserDefinedCondition", Progress.Data.DataType:INTEGER).
		tableDesc1:Columns = arrayvar0.
		this-object:bindingSource1:TableSchema = tableDesc1.
		/*  */
		/* btnTitle */
		/*  */
		this-object:btnTitle:Dock = System.Windows.Forms.DockStyle:Top.
		this-object:btnTitle:FlatStyle = System.Windows.Forms.FlatStyle:Flat.
		this-object:btnTitle:Font = new System.Drawing.Font("Arial", 14.25, System.Drawing.FontStyle:Bold, System.Drawing.GraphicsUnit:Point, Progress.Util.CastUtil:ToByte(0)).
		this-object:btnTitle:Location = new System.Drawing.Point(0, 0).
		this-object:btnTitle:Name = "btnTitle".
		this-object:btnTitle:Size = new System.Drawing.Size(948, 37).
		this-object:btnTitle:TabIndex = 14.
		this-object:btnTitle:Text = "Conditional Formatting".
		this-object:btnTitle:TextAlign = System.Drawing.ContentAlignment:MiddleLeft.
		this-object:btnTitle:UseCompatibleTextRendering = true.
		this-object:btnTitle:Click:subscribe(this-object:btnTitle_Click).
		this-object:btnTitle:MouseUp:subscribe(this-object:btnTitle_MouseUp).
		/*  */
		/* ultraLabel1 */
		/*  */
		this-object:ultraLabel1:Dock = System.Windows.Forms.DockStyle:Top.
		this-object:ultraLabel1:Location = new System.Drawing.Point(0, 37).
		this-object:ultraLabel1:Name = "ultraLabel1".
		this-object:ultraLabel1:Size = new System.Drawing.Size(948, 83).
		this-object:ultraLabel1:TabIndex = 50.
		this-object:ultraLabel1:Text = resources:GetString("ultraLabel1.Text").
		/*  */
		/* panel3 */
		/*  */
		this-object:panel3:Controls:Add(this-object:lblInfo).
		this-object:panel3:Controls:Add(this-object:btnShowConditionalFormatDesigner).
		this-object:panel3:Dock = System.Windows.Forms.DockStyle:Left.
		this-object:panel3:Location = new System.Drawing.Point(0, 120).
		this-object:panel3:Name = "panel3".
		this-object:panel3:Size = new System.Drawing.Size(232, 422).
		this-object:panel3:TabIndex = 51.
		/*  */
		/* lblInfo */
		/*  */
		this-object:lblInfo:Anchor = System.Windows.Forms.AnchorStyles:Top.
		this-object:lblInfo:Location = new System.Drawing.Point(8, 120).
		this-object:lblInfo:Name = "lblInfo".
		this-object:lblInfo:Size = new System.Drawing.Size(216, 296).
		this-object:lblInfo:TabIndex = 1.
		this-object:lblInfo:Text = "lblInfo".
		/*  */
		/* btnShowConditionalFormatDesigner */
		/*  */
		this-object:btnShowConditionalFormatDesigner:Anchor = System.Windows.Forms.AnchorStyles:Top.
		this-object:btnShowConditionalFormatDesigner:Location = new System.Drawing.Point(8, 8).
		this-object:btnShowConditionalFormatDesigner:Name = "btnShowConditionalFormatDesigner".
		this-object:btnShowConditionalFormatDesigner:Size = new System.Drawing.Size(216, 104).
		this-object:btnShowConditionalFormatDesigner:TabIndex = 0.
		this-object:btnShowConditionalFormatDesigner:Text = "Click here to display the Conditional Formatting Designer dialog for the 'UserDefinedCondition' column.".
		this-object:btnShowConditionalFormatDesigner:Click:subscribe(this-object:btnShowConditionalFormatDesigner_Click).
		/*  */
		/* UltraGrid1 */
		/*  */
		this-object:UltraGrid1:CalcManager = this-object:ultraCalcManager1.
		this-object:UltraGrid1:DataSource = this-object:bindingSource1.
		appearance1:BackColor = System.Drawing.SystemColors:Window.
		appearance1:BorderColor = System.Drawing.SystemColors:InactiveCaption.
		this-object:UltraGrid1:DisplayLayout:Appearance = appearance1.
		ultraGridColumn1:Header:VisiblePosition = 0.
		ultraGridColumn2:Header:VisiblePosition = 1.
		ultraGridColumn3:Header:VisiblePosition = 2.
		ultraGridColumn4:Header:VisiblePosition = 3.
		ultraGridColumn5:Header:VisiblePosition = 4.
		ultraGridColumn6:Header:VisiblePosition = 5.
		@VisualDesigner.FormMember (NeedsInitialize="false", InitializeArray="true").
		define variable arrayvar1 as System.Object extent 6 no-undo.
		arrayvar1[1] = ultraGridColumn1.
		arrayvar1[2] = ultraGridColumn2.
		arrayvar1[3] = ultraGridColumn3.
		arrayvar1[4] = ultraGridColumn4.
		arrayvar1[5] = ultraGridColumn5.
		arrayvar1[6] = ultraGridColumn6.
		ultraGridBand1:Columns:AddRange(arrayvar1).
		this-object:UltraGrid1:DisplayLayout:BandsSerializer:Add(ultraGridBand1).
		this-object:UltraGrid1:DisplayLayout:BorderStyle = Infragistics.Win.UIElementBorderStyle:Solid.
		this-object:UltraGrid1:DisplayLayout:CaptionVisible = Infragistics.Win.DefaultableBoolean:False.
		this-object:UltraGrid1:DisplayLayout:MaxColScrollRegions = 1.
		this-object:UltraGrid1:DisplayLayout:MaxRowScrollRegions = 1.
		this-object:UltraGrid1:DisplayLayout:Override:BorderStyleCell = Infragistics.Win.UIElementBorderStyle:Dotted.
		this-object:UltraGrid1:DisplayLayout:Override:BorderStyleRow = Infragistics.Win.UIElementBorderStyle:Dotted.
		appearance2:BackColor = System.Drawing.SystemColors:Window.
		this-object:UltraGrid1:DisplayLayout:Override:CardAreaAppearance = appearance2.
		appearance3:BorderColor = System.Drawing.Color:Silver.
		appearance3:TextTrimming = Infragistics.Win.TextTrimming:EllipsisCharacter.
		this-object:UltraGrid1:DisplayLayout:Override:CellAppearance = appearance3.
		this-object:UltraGrid1:DisplayLayout:Override:CellClickAction = Infragistics.Win.UltraWinGrid.CellClickAction:EditAndSelectText.
		this-object:UltraGrid1:DisplayLayout:Override:CellPadding = 0.
		appearance4:BackColor = System.Drawing.SystemColors:Control.
		appearance4:BackColor2 = System.Drawing.SystemColors:ControlDark.
		appearance4:BackGradientAlignment = Infragistics.Win.GradientAlignment:Client.
		appearance4:BackGradientStyle = Infragistics.Win.GradientStyle:Horizontal.
		appearance4:BorderColor = System.Drawing.SystemColors:Window.
		this-object:UltraGrid1:DisplayLayout:Override:GroupByRowAppearance = appearance4.
		appearance5:TextHAlignAsString = "Left".
		this-object:UltraGrid1:DisplayLayout:Override:HeaderAppearance = appearance5.
		this-object:UltraGrid1:DisplayLayout:Override:HeaderClickAction = Infragistics.Win.UltraWinGrid.HeaderClickAction:SortMulti.
		this-object:UltraGrid1:DisplayLayout:Override:HeaderStyle = Infragistics.Win.HeaderStyle:WindowsXPCommand.
		appearance6:BackColor = System.Drawing.SystemColors:Window.
		appearance6:BorderColor = System.Drawing.Color:Silver.
		this-object:UltraGrid1:DisplayLayout:Override:RowAppearance = appearance6.
		appearance7:BackColor = System.Drawing.SystemColors:ControlLight.
		this-object:UltraGrid1:DisplayLayout:Override:TemplateAddRowAppearance = appearance7.
		this-object:UltraGrid1:DisplayLayout:ScrollBounds = Infragistics.Win.UltraWinGrid.ScrollBounds:ScrollToFill.
		this-object:UltraGrid1:DisplayLayout:ScrollStyle = Infragistics.Win.UltraWinGrid.ScrollStyle:Immediate.
		this-object:UltraGrid1:Dock = System.Windows.Forms.DockStyle:Fill.
		this-object:UltraGrid1:Location = new System.Drawing.Point(232, 120).
		this-object:UltraGrid1:Name = "UltraGrid1".
		this-object:UltraGrid1:Size = new System.Drawing.Size(716, 422).
		this-object:UltraGrid1:TabIndex = 52.
		this-object:UltraGrid1:InitializeLayout:subscribe(this-object:UltraGrid1_InitializeLayout).
		this-object:UltraGrid1:AfterCellActivate:subscribe(this-object:UltraGrid1_AfterCellActivate).
		/*  */
		/* ultraCalcManager1 */
		/*  */
		this-object:ultraCalcManager1:ContainingControl = this-object.
		/*  */
		/* frmConditionalFormatting */
		/*  */
		this-object:ClientSize = new System.Drawing.Size(948, 542).
		this-object:Controls:Add(this-object:UltraGrid1).
		this-object:Controls:Add(this-object:panel3).
		this-object:Controls:Add(this-object:ultraLabel1).
		this-object:Controls:Add(this-object:btnTitle).
		this-object:Name = "frmConditionalFormatting".
		this-object:Text = "Conditional Formatting".
		this-object:Load:subscribe(this-object:frmConditionalFormatting_Load).
		this-object:FormClosing:subscribe(this-object:frmConditionalFormatting_FormClosing).
		cast(this-object:bindingSource1, System.ComponentModel.ISupportInitialize):EndInit().
		this-object:panel3:ResumeLayout(false).
		cast(this-object:UltraGrid1, System.ComponentModel.ISupportInitialize):EndInit().
		cast(this-object:ultraCalcManager1, System.ComponentModel.ISupportInitialize):EndInit().
		this-object:ResumeLayout(false).

	end method.

    method	protected ConditionValueAppearance CreateOperatorConditionValueAppearance():
		define variable conditionValueAppearance as ConditionValueAppearance no-undo.
		define variable negativeCondition as OperatorCondition no-undo.
	    define variable positiveCondition as OperatorCondition no-undo.
	    define variable negativeAppearance as Infragistics.Win.Appearance  no-undo.
		define variable positiveAppearance as Infragistics.Win.Appearance  no-undo.
		
		/* This method will create a ConditionValueAppearance using OperatorConditions. OperatorConditions */
		/* do not rely on UltraCalcManager and they cannot use formulas. They need a ConditionOperator */
		/* and a value to determine if the cell matches the condition. */ 

		/* Create a new ConditionValueAppearance */
		conditionValueAppearance = new ConditionValueAppearance().

		/* Create a OperatorCondition that checks for negative numbers */
		negativeCondition = new OperatorCondition(ConditionOperator:LessThan, 0).

		/* Create an appearance that sets the ForeColor to red. */
		negativeAppearance = new Infragistics.Win.Appearance("Negative").
		negativeAppearance:ForeColor = Color:Red.			

		/* Create a OperatorCondition that checks for positive numbers */
		positiveCondition = new OperatorCondition(ConditionOperator:GreaterThanOrEqualTo, 0).

		/* Create an appearance that sets the ForeColor to blue. */
		positiveAppearance = new Infragistics.Win.Appearance("Positive").
		positiveAppearance:ForeColor = Color:Blue.

		/* Now that we have the conditions and appearances we need, add them to the */ 
		/* conditionValueAppearance. The conditions will be evaluated in order. */
		conditionValueAppearance:Add(negativeCondition, negativeAppearance).
		conditionValueAppearance:Add(positiveCondition, positiveAppearance).
		
		return conditionValueAppearance.
    end method.
    
	method protected ConditionValueAppearance CreateFormulaConditionValueAppearance(formulaProvider as Infragistics.Win.CalcEngine.IFormulaProvider):
		define variable conditionValueAppearance as ConditionValueAppearance no-undo.
		define variable negativeCondition as FormulaCondition no-undo.
		define variable evenCondition as FormulaCondition no-undo.
		define variable oddCondition as FormulaCondition no-undo.
		define variable evenAppearance as Infragistics.Win.Appearance  no-undo.
    	define variable oddAppearance as Infragistics.Win.Appearance  no-undo.
    	
		/* This method will create a ConditionValueAppearance using FormulaConditions. FormulaConditions */
		/* rely on UltraCalcManager, so there must an UltraCalcManager component on the form with the */ 
		/* grid in order for these conditions to work. The formulaCondition also requires a */
		/* a reference to an IFormulaProvider. The IFormulaProvider in this case is the  */
		/* UltraGridColumn. */
		/* The Formula for a FormulaCondition should include the '[ConditionValue]' operand. This will */
		/* return the value of the cell being evaluated. */ 

		/* Create a new ConditionValueAppearance */
		conditionValueAppearance = new ConditionValueAppearance().

		/* Create a FormulaCondition that checks for odd numbers */
		oddCondition = new FormulaCondition(formulaProvider, "isodd([ConditionValue])").

		/* Create an appearance that sets the ForeColor to red. */
		oddAppearance = new Infragistics.Win.Appearance("Odd").
		oddAppearance:ForeColor = Color:Red.

		/* Create a FormulaCondition that checks for even numbers */
		evenCondition = new FormulaCondition(formulaProvider, "iseven([ConditionValue])").

		/* Create an appearance that sets the ForeColor to blue. */
		evenAppearance = new Infragistics.Win.Appearance("Even").
		evenAppearance:ForeColor = Color:Blue.

		/* Now that we have the conditions and appearances we need, add them to the */ 
		/* conditionValueAppearance. The conditions will be evaluated in order. */
		conditionValueAppearance:Add(oddCondition, oddAppearance).
		conditionValueAppearance:Add(evenCondition, evenAppearance).
		
		return conditionValueAppearance.
	end method.
	
	method protected ConditionValueAppearance CreateConditionGroupConditionValueAppearance(formulaProvider as Infragistics.Win.CalcEngine.IFormulaProvider):
		define variable conditionValueAppearance as ConditionValueAppearance no-undo.
		define variable conditionGroup as ConditionGroup no-undo.
		define variable operatorCondition as OperatorCondition no-undo.
		define variable formulaCondition as FormulaCondition no-undo.
		
		define variable greenAppearance as Infragistics.Win.Appearance  no-undo.
		
		/* This method will create a ConditionValueAppearance using ConditionGroups. ConditionGroups */
		/* are conditions that group other conditions together. This is useful for combining multiple */ 
		/* OperatorConditions, FormulaConditions, or ComplementConditions into one condition. */
		/* For this example, we will use a ConditionGroup to make all value between -2 and +2 */
		/* show up with a green BackColor and a white ForeColor. */

		/* Create a new ConditionValueAppearance */
		conditionValueAppearance = new ConditionValueAppearance().

		/* Create a ConditionGroup */
		conditionGroup = new ConditionGroup().
        
		/* The ConditionGroup can contain any other type of condition, or even another */ 
		/* ConditionGroup. Just to demonstrate this, we will use two different types of */ 
		/* conditions.  */

		/* Create a OperatorCondition that checks for numbers that are greater than or  */
		/* equal to -2.  */
		operatorCondition = new OperatorCondition(ConditionOperator:GreaterThanOrEqualTo, -2).

		/* Create a FormulaCondition that checks for numbers that are less than or  */
		/* equal to 2.  */
		formulaCondition = new FormulaCondition(formulaProvider, "[ConditionValue] <= 2").
        
		/* Add the two conditions to the conditionGroup */
		conditionGroup:Add(operatorCondition).
		conditionGroup:Add(formulaCondition).

		/* We only want the color to apply to cells that meet both conditions. So we */
		/* will set the Logical Operator to 'And'. */
        conditionGroup:CombineOperator = LogicalOperator:And.

		/* Create an appearance that sets the ForeColor to green. */
		greenAppearance = new Infragistics.Win.Appearance("Between -2 and +2").
		greenAppearance:BackColor = Color:Green.
		greenAppearance:ForeColor = Color:White.

		/* Now that we have the condition and appearance we need, add them to the */
		/* conditionValueAppearance. */
		conditionValueAppearance:Add(conditionGroup, greenAppearance).			
		
		return conditionValueAppearance.
	end method.

	method protected ConditionValueAppearance CreateComplementConditionValueAppearance():
		define variable conditionValueAppearance as ConditionValueAppearance no-undo.
		define variable negativeCondition as OperatorCondition no-undo.
		define variable positiveCondition as ComplementCondition no-undo.
		define variable negativeAppearance as Infragistics.Win.Appearance  no-undo.
		define variable positiveAppearance as Infragistics.Win.Appearance  no-undo.
	    /* This method will create a ConditionValueAppearance using a OperatorCondition and a */ 
		/* ComplementCondition. ComplementConditions do not rely on UltraCalcManager and they */ 
		/* cannot use formulas. This column will display exactly as the OperatorConditon column does. */
		/* We will create a OperatorCondition to color negative numbers red. But this time, */ 
		/* instead of using another OperatorCondition to color positive numbers, we will use */
		/* a ComplementCondition so that anything that does not meet the first condtion will */
		/* be colored blue. */

		/* Create a new ConditionValueAppearance */
		conditionValueAppearance = new ConditionValueAppearance().

		/* Create a ComplementCondition that checks for negative numbers */
		negativeCondition = new OperatorCondition(ConditionOperator:LessThan, 0).

		/* Create an appearance that sets the ForeColor to red. */
		negativeAppearance = new Infragistics.Win.Appearance("Negative").
		negativeAppearance:ForeColor = Color:Red.			

		/* Create a ComplementCondition that checks for anything that does not meet the */
		/* negativeCondition */
		positiveCondition = new ComplementCondition(negativeCondition).

		/* Create an appearance that sets the ForeColor to blue. */
		positiveAppearance = new Infragistics.Win.Appearance("Positive").
		positiveAppearance:ForeColor = Color:Blue.

		/* Now that we have the conditions and appearances we need, add them to the */ 
		/* conditionValueAppearance. The conditions will be evaluated in order. */
		conditionValueAppearance:Add(negativeCondition, negativeAppearance).
		conditionValueAppearance:Add(positiveCondition, positiveAppearance).
		
		return conditionValueAppearance.
    end method.
    
	method protected ConditionValueAppearance CreateTrueConditionValueAppearance():
		define variable conditionValueAppearance as ConditionValueAppearance no-undo.
		define variable negativeCondition as OperatorCondition no-undo.
		define variable positiveCondition as TrueCondition no-undo.
		define variable negativeAppearance as Infragistics.Win.Appearance  no-undo.
		define variable positiveAppearance as Infragistics.Win.Appearance  no-undo.
	    /* This method will create a ConditionValueAppearance using a OperatorCondition and a  */
		/* TrueCondition. TrueConditions do not rely on UltraCalcManager and they  */
		/* cannot use formulas. This column will display exactly as the OperatorConditon column does. */
		/* We will create a OperatorCondition to color negative numbers red. But this time, */ 
		/* instead of using another OperatorCondition to color positive numbers, we will use */
		/* a TrueCondition so that anything that does not meet the first condition will */
		/* be colored blue. */ 

		/* Create a new ConditionValueAppearance */
		conditionValueAppearance = new ConditionValueAppearance().

		/* Create a TrueCondition that checks for negative numbers */
		negativeCondition = new OperatorCondition(ConditionOperator:LessThan, 0).

		/* Create an appearance that sets the ForeColor to red. */
		negativeAppearance = new Infragistics.Win.Appearance("Negative").
		negativeAppearance:ForeColor = Color:Red.			

		/* Create a TrueCondition. The TrueCondition will always resolve to true, so it will */
		/* apply to all cell in the column. However, it will not overwrite appearances properties that */
		/* have already been resolved. So this condition will only apply to cells that do not */
		/* match the previous condition in the list. */
		positiveCondition = new TrueCondition().

		/* Create an appearance that sets the ForeColor to blue. */
		positiveAppearance = new Infragistics.Win.Appearance("Positive").
		positiveAppearance:ForeColor = Color:Blue.

		/* Now that we have the conditions and appearances we need, add them to the */ 
		/* conditionValueAppearance. The conditions will be evaluated in order. */
		conditionValueAppearance:Add(negativeCondition, negativeAppearance).
		conditionValueAppearance:Add(positiveCondition, positiveAppearance).
		
		return conditionValueAppearance.
	end method.
	
	method private void UpdateInfoLabel():
	 
		if not valid-object(UltraGrid1:ActiveCell) then
	    do:
			lblInfo:Text = "Click on a cell in the grid to display more information about what conditions are applied to the column.".
			return.
		end.  

		case  UltraGrid1:ActiveCell:Column:Key:
			when "OperatorCondition"  then
				lblInfo:Text = "The OperatorCondition column is using 2 OperatorConditions to color negative numbers red and positive numbers blue.".
 
			when "FormulaCondition"  then
				lblInfo:Text = "The FormulaCondition column is using 2 FormulaConditions to color odd numbers red and even numbers blue.".
 
			when "ConditionGroup"  then
				lblInfo:Text = "The ConditionGroup column is mixing different types of conditions. It's using a OperatorCondition to check for values greater than or equal to -2 and a FormulaCondition to check for values less than or equal to +2. ConditionGroups can be set to use AND or OR. This one is set to AND, so only values that meet both conditions will match the condition and display white text on a green background.".
		 
			when "ComplementCondition" then
				lblInfo:Text = "The ComplementCondition column is doing the same thing that the OperatorCondition column is doing, but in a slightly simplified way. Just like the OperatorCondition column, this column has a OperatorCondition which is checking for negative numbers and coloring them red. Instead of using a second OperatorCondition for positive numbers, this columns is using a ComplementCondition. The ComplementCondition returns the opposite of any other type of condition. So by creating a ComplementCondition for the OperatorCondition used here, we can trap for numbers that are not negative, without have to use an operator and a value.".
 
			when "TrueCondition"  then
				lblInfo:Text = "The TrueCondition column is doing the same thing that the OperatorCondition and ComplementCondition columns are doing, but in an even simpler way. Once again this column uses a OperatorCondition which is checking for negative numbers and coloring them red. Then it uses a TrueCondition with a ForeColor of Blue. The TrueCondition will always return true, so it will affect every cell in the column. But since the conditions are evaulated in order, cell with negative values will have their ForeColor set to red by the OperatorCondition first, and will not be affected by the TrueCondition. In this way, TrueConditions can be used to apply default appearances to anything in the column that does not meet any prior condition.".
		 					
			when "UserDefinedCondition"  then
				lblInfo:Text = "The UserDefinedCondition column is here to demonstrate how you can show the ConditionValueAppearanceForm. Click the button above to show the dialog and edit the conditional formatting of the column.".
 
		end case.
	end method.
	
	/*------------------------------------------------------------------------------
			Purpose:  																	  
			Notes: Show the ConditionValueAppearanceForm to the user  																	  
	------------------------------------------------------------------------------*/
	method private void ShowConditionalFormatDesigner(gridColumn as Infragistics.Win.UltraWinGrid.UltraGridColumn ):
        define variable result as System.Windows.Forms.DialogResult no-undo.
        
		define variable conditionValueAppearanceForm as ConditionValueAppearanceForm no-undo.

		conditionValueAppearanceForm = new ConditionValueAppearanceForm(gridColumn).
		wait-for conditionValueAppearanceForm:ShowDialog(this-object).
		result = conditionValueAppearanceForm:DialogResult.
		
		/* If the user clicked OK, set the ConditionValueAppearance on the column.*/
		if Progress.Util.EnumHelper:AreEqual(result, System.Windows.Forms.DialogResult:OK) then
			gridColumn:ValueBasedAppearance = conditionValueAppearanceForm:ConditionValueAppearance.
		
	end method.
	
    method private void CreateData():
        define variable i as integer no-undo.
        
        do i = -10 to 10:
            create Band.
            assign
                RowKey = i 
                OperatorCondition = i 
                FormulaCondition = i 
                ConditionGroup = i 
                ComplementCondition = i 
                TrueCondition = i 
                UserDefinedCondition = i.
        end.      
        
    end method.

    method private void StartDataSource():
        define variable queryHandle as handle no-undo.
        create query queryHandle.
        queryHandle:set-buffers(buffer Band:handle). 
        queryHandle:query-prepare("for each Band").
        queryHandle:query-open().
        bindingSource1:handle = queryHandle.
    end method.    

    /* implements ISamplesBase interface  */
    method public void ShowMe( owner as System.Windows.Forms.Form  ):
	    if (owner <> ?) then
			this-object:Owner = owner.
		this-object:Show().
	    this-object:CancelButton = btnTitle.
        this-object:CenterToScreen().
		this-object:MaximizeBox = true.
	end.	

    /* implements ISamplesBase interface  */
    method public void HideMe( ):
        this-object:Hide().   
    end.
  
	/*------------------------------------------------------------------------------
			Purpose:  																	  
			Notes:  																	  
	------------------------------------------------------------------------------*/
	@VisualDesigner.
	METHOD PRIVATE VOID frmConditionalFormatting_Load( INPUT sender AS System.Object, INPUT e AS System.EventArgs ):
		/* Hide the grid caption by setting the Text to empty string. */
	    UltraGrid1:Text = "".
        StartDataSource() .                               
 		UpdateInfoLabel(). 
		RETURN.

	END METHOD.
	/*------------------------------------------------------------------------------
			Purpose:  																	  
			Notes:  																	  
	------------------------------------------------------------------------------*/
	@VisualDesigner.
	METHOD PRIVATE VOID frmConditionalFormatting_FormClosing( INPUT sender AS System.Object, INPUT e AS System.Windows.Forms.FormClosingEventArgs ):
		if valid-object(this-object:Owner) then 
	    do:
	        e:Cancel = true.
		    this-object:Visible = false.
		end.
		RETURN.

	END METHOD.
	/*------------------------------------------------------------------------------
			Purpose:  																	  
			Notes:  																	  
	------------------------------------------------------------------------------*/
	@VisualDesigner.
	METHOD PRIVATE VOID UltraGrid1_InitializeLayout( INPUT sender AS System.Object, INPUT e AS Infragistics.Win.UltraWinGrid.InitializeLayoutEventArgs ):
		define variable layout as Infragistics.Win.UltraWinGrid.UltraGridLayout no-undo.
		define variable rootBand as Infragistics.Win.UltraWinGrid.UltraGridBand no-undo.
		define variable rootOverride as Infragistics.Win.UltraWinGrid.UltraGridOverride no-undo.
		define variable formulaConditionColumn as Infragistics.Win.UltraWinGrid.UltraGridColumn no-undo.
		define variable conditionGroupColumn as Infragistics.Win.UltraWinGrid.UltraGridColumn no-undo.
	
		define variable operatorConditionValueAppearance as ConditionValueAppearance no-undo.
		define variable formulaConditionValueAppearance as ConditionValueAppearance no-undo.
		define variable conditionGroupConditionValueAppearance as ConditionValueAppearance no-undo.
		define variable complementConditionValueAppearance as ConditionValueAppearance no-undo.
		define variable trueConditionValueAppearance as ConditionValueAppearance no-undo.
		
		assign
		    layout = e:Layout.
		    rootBand = layout:Bands[0].
		    rootOverride = layout:Override.

		/* Turn off selection. */
		rootOverride:SelectTypeCell = Infragistics.Win.UltraWinGrid.SelectType:None.
		rootOverride:SelectTypeRow = Infragistics.Win.UltraWinGrid.SelectType:None.
		rootOverride:SelectTypeCol = Infragistics.Win.UltraWinGrid.SelectType:None.

		/* OperatorCondition
		Create a ConditionValueAppearance that uses OperatorConditions to make negative numbers red and 
		positive numbers blue and assign it to the OperatorCondition column. */
		
		operatorConditionValueAppearance =  CreateOperatorConditionValueAppearance().
		rootBand:Columns["OperatorCondition"]:ValueBasedAppearance = operatorConditionValueAppearance.

		/* FormulaCondition
	    Create a ConditionValueAppearance that uses FormulaConditions to make negative numbers red and 
		positive numbers blue and assign it to the FormulaCondition column. */
		formulaConditionColumn = rootBand:Columns["FormulaCondition"].
		formulaConditionValueAppearance = CreateFormulaConditionValueAppearance(formulaConditionColumn).
		formulaConditionColumn:ValueBasedAppearance = formulaConditionValueAppearance.

		/* ConditionGroup
		   Create a ConditionValueAppearance that uses ConditionGroups to make numbers between
		   -2 and +2 display in green. */			
		conditionGroupColumn = rootBand:Columns["ConditionGroup"].
        conditionGroupConditionValueAppearance = CreateConditionGroupConditionValueAppearance(conditionGroupColumn).
		conditionGroupColumn:ValueBasedAppearance = conditionGroupConditionValueAppearance.

		/* ComplementCondition
		   Create a ConditionValueAppearance that uses OperatorConditions and ComplementConditions 
		   to make negative numbers red and all other numbers blue and assign it to the 
		   ComplementCondition column. */
		complementConditionValueAppearance = CreateComplementConditionValueAppearance().
		rootBand:Columns["ComplementCondition"]:ValueBasedAppearance = complementConditionValueAppearance.

		/* TrueCondition
		   Create a ConditionValueAppearance that uses OperatorConditions and TrueConditions 
		   to make negative numbers red and all other numbers blue and assign it to the 
		   TrueCondition column. */
		trueConditionValueAppearance = CreateTrueConditionValueAppearance().
		rootBand:Columns["TrueCondition"]:ValueBasedAppearance = trueConditionValueAppearance.
	
		RETURN.

	END METHOD.
	
	/*------------------------------------------------------------------------------
			Purpose:  																	  
			Notes:  																	  
	------------------------------------------------------------------------------*/
	@VisualDesigner.
	METHOD PRIVATE VOID UltraGrid1_AfterCellActivate( INPUT sender AS System.Object, INPUT e AS System.EventArgs ):
	    UpdateInfoLabel().
		RETURN.

	END METHOD.
	
	/*------------------------------------------------------------------------------
			Purpose:  																	  
			Notes:  																	  
	------------------------------------------------------------------------------*/
	@VisualDesigner.
	METHOD PRIVATE VOID btnTitle_Click( INPUT sender AS System.Object, INPUT e AS System.EventArgs ):
        if valid-object(this-object:Owner) then
            HideMe().
		RETURN.

	END METHOD.
	
	/*------------------------------------------------------------------------------
			Purpose:  																	  
			Notes:  																	  
	------------------------------------------------------------------------------*/
	@VisualDesigner.
	METHOD PRIVATE VOID btnTitle_MouseUp( INPUT sender AS System.Object, INPUT e AS System.Windows.Forms.MouseEventArgs ):
		if valid-object(this-object:Owner) then
		    (cast (this-object:Owner,frmMain)):Navigation(e:Button).
		RETURN.
	END METHOD.
	
	/*------------------------------------------------------------------------------
			Purpose:  																	  
			Notes:  																	  
	------------------------------------------------------------------------------*/
	@VisualDesigner.
	METHOD PRIVATE VOID btnShowConditionalFormatDesigner_Click( INPUT sender AS System.Object, INPUT e AS System.EventArgs ):
		ShowConditionalFormatDesigner(UltraGrid1:DisplayLayout:Bands[0]:Columns["UserDefinedCondition"]).
		RETURN.
	END METHOD.


	DESTRUCTOR PUBLIC frmConditionalFormatting ( ):

		IF VALID-OBJECT(components) THEN DO:
			CAST(components, System.IDisposable):Dispose().
		END.

	END DESTRUCTOR.

END CLASS.